#lang rhombus

enum RainbowColor:
  red
  orange
  yellow
  green
  blue
  indigo
  violet

check RainbowColor.red ~is #'red
check RainbowColor.violet ~is #'violet

check #'red is_a RainbowColor ~is #true
check #'pink is_a RainbowColor ~is #false
check "red" is_a RainbowColor ~is #false

check:
  match #'red
  | _ :: RainbowColor: "yes"
  | ~else: "no"
  ~is "yes"

check:
  match #'pink
  | _ :: RainbowColor: "yes"
  | ~else: "no"
  ~is "no"

check:
  match "red"
  | _ :: RainbowColor: "yes"
  | ~else: "no"
  ~is "no"

check:
  match #'red
  | RainbowColor.red: "yes"
  | ~else: "no"
  ~is "yes"

check:
  match #'blue
  | RainbowColor.red: "yes"
  | ~else: "no"
  ~is "no"

check:
  match #'blue
  | RainbowColor.red: "yes"
  | RainbowColor.blue: "now yes"
  | ~else: "no"
  ~is "now yes"

enum CrayonColor:
  ~is_a RainbowColor
  black
  white

check #'red is_a CrayonColor ~is #true
check #'pink is_a CrayonColor ~is #false
check "red" is_a CrayonColor ~is #false
check #'white is_a CrayonColor ~is #true
check #'white is_a RainbowColor ~is #false

check:
  match #'white
  | _ :: RainbowColor: "rainbow"
  | _ :: CrayonColor: "crayon"
  ~is "crayon"

check:
  match #'blue
  | _ :: RainbowColor: "rainbow"
  | _ :: CrayonColor: "crayon"
  ~is "rainbow"

check:
  match #'white
  | CrayonColor.white: "crayon"
  ~is "crayon"

// static info
class A():
  nonfinal
  method whoami():
    "A"

class B():
  extends A
  override whoami():
    "B"

enum AB:
  ~is_a A
  ~is_a B

check:
  A() is_a AB ~is #true
  B() is_a AB ~is #true

block:
  use_static
  check:
    (A() :: AB).whoami() ~is "A"
    (B() :: AB).whoami() ~is "B"

check:
  ~eval
  use_static
  class A():
    method whoami():
      "A"
  enum NoIntersection:
    oops
    ~is_a A
  (#'oops :: NoIntersection).whoami()
  ~throws "no such field or method (based on static information)"

check:
  ~eval
  use_static
  class A():
    method whoami():
      "A"
  class B():
    method whoami():
      "B"
  enum NoIntersection:
    ~is_a A
    ~is_a B
  (dynamic(A()) :: NoIntersection).whoami()
  ~throws "no such field or method (based on static information)"

// duplicate identifier
check:
  ~eval
  enum Dup:
    dup
    dup
  ~throws values(
    "duplicate enum identifier",
    "dup",
  )

// matching order
block:
  fun first(val):
    println("first")
    val == #'first
  fun second(val):
    println("second")
    val == #'second
  fun third(val):
    println("third")
    val == #'third
  enum Order:
    ~is_a satisfying(first)
    ~is_a satisfying(second)
    ~is_a satisfying(third)
  check #'first is_a Order ~prints "first\n"
  check #'second is_a Order ~prints "first\nsecond\n"
  check #'third is_a Order ~prints "first\nsecond\nthird\n"

block:
  fun first(val):
    println("first")
    val == #'first
  fun second(val):
    println("second")
    val == #'second
  fun third(val):
    println("third")
    val == #'third
  enum Order:
    ~is_a satisfying(first)
    first_and_a_half
    ~is_a satisfying(second)
    second_and_a_half
    ~is_a satisfying(third)
  check #'first is_a Order ~prints "first\n"
  check #'first_and_a_half is_a Order ~prints "first\n"
  check #'second is_a Order ~prints "first\nsecond\n"
  check #'second_and_a_half is_a Order ~prints "first\nsecond\n"
  check #'third is_a Order ~prints "first\nsecond\nthird\n"

// (non-)converter
block:
  enum Order:
    ~is_a matching(#'first) && converting(fun (v): println("first"); v)
    ~is_a matching(#'second) && converting(fun (v): println("second"); v)
    ~is_a matching(#'third) && converting(fun (v): println("third"); v)
  check #'first is_a Order ~prints ""
  check #'second is_a Order ~prints ""
  check #'third is_a Order ~prints ""

block:
  enum Order:
    ~is_a matching(#'first) && converting(fun (v): println("first"); v)
    first_and_a_half
    ~is_a matching(#'second) && converting(fun (v): println("second"); v)
    second_and_a_half
    ~is_a matching(#'third) && converting(fun (v): println("third"); v)
  check #'first is_a Order ~prints ""
  check #'first_and_a_half is_a Order ~prints ""
  check #'second is_a Order ~prints ""
  check #'second_and_a_half is_a Order ~prints ""
  check #'third is_a Order ~prints ""


namespace ns
enum ns.Example:
  one
  two
check #'one ~is_a ns.Example
