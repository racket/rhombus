#lang rhombus

block:
  import "static_arity.rhm"
  static_arity.check:
    Function.map(fn, lst0, lst, ...) ~method
    Function.for_each(fn, lst0, lst, ...) ~method
    Function.name(fn) ~method
    Function.realm(fn) ~method
    Function.rename(fn, name, #//~realm: [realm]) ~method
    Function.arity(fn) ~method
    Function.reduce_arity(fn, mask, req_kws, allow_kws, #//~name: [name], #//~realm: [realm]) ~method

check:
  1 is_a Function ~is #false
  1 is_a Function.of_arity(1) ~is #false
  List is_a Function ~is #true
  List is_a Function.of_arity(1) ~is #true
  List is_a Function.of_arity(1, 2, 3) ~is #true
  Pair is_a Function.of_arity(2) ~is #true
  Pair is_a Function.of_arity(1, 2) ~is #false
  (fun (x): #void) is_a Function.of_arity(1) ~is #true
  (fun (x, ~y = 0): #void) is_a Function.of_arity(1) ~is #true
  (fun (x, ~y): #void) is_a Function.of_arity(1) ~is #false
  (fun (x, ~y = 0): #void) is_a Function.of_arity(1, ~y) ~is #true
  (fun (x, ~y): #void) is_a Function.of_arity(1, ~y) ~is #true

block:
  use_static
  fun g(x, ...): [x, ...]
  let f :: Function.of_arity(1) = (g :: Function.of_arity(2))
  check f(1) ~is [1]
  check f(1, 2) ~is [1, 2]

check:
  ~eval
  use_static
  fun g(x, ...): [x, ...]
  def f :: Function.of_arity(1) = (dynamic(g) :: Function.of_arity(2))
  f()
  ~throws "wrong number of arguments in function call"

check:
  ~eval
  use_static
  fun g(x, ...): [x, ...]
  def f :: Function.of_arity(1) = (dynamic(g) :: Function.of_arity(2))
  f(1, 2, 3)
  ~throws "wrong number of arguments in function call"

check:
  use_static
  fun f1(g :: Function.of_arity(1)):
    g(1)
  fun f2(g :: Function.of_arity(1, ~ok)):
    g(1)
  fun f3(g :: Function.of_arity(1, ~ok)):
    g(1, ~ok: 10)
  ~completes

check:
  ~eval
  use_static
  fun f(g :: Function.of_arity(1)):
    g(1, ~kw: 10)
  ~throws "keyword argument not recognized"

check:
  ~eval
  use_static
  fun f(g :: Function.of_arity(1) || Function.of_arity(2)):
    g(1)
  ~throws "wrong number of arguments "

check:
  (fun (x): #void) is_a Function.of_arity(#void, error("I throw first!"))
  ~throws "I throw first!"

check:
  (fun (x): #void) is_a Function.of_arity(#false, 1)
  ~throws values(
    "Function.of_arity: " ++ error.annot_msg(),
    error.annot("NonnegInt").msg,
    error.val(#false).msg,
  )

block:
  use_static
  check:
    (fun (x): x).map([1, 2, 3], [4, 5, 6])
    ~throws values(
      "Function.map: argument mismatch",
      "the given function's expected number of arguments does not match the given number of lists",
      "expected: 1",
      "given: 2",
    )
  check:
    (fun (x, y): x+y).map([1, 2, 3], [4, 5, 6])
    ~is [5, 7, 9]
  check:
    (fun
     | (x): x
     | (x, y): x+y)
      .map([1, 2, 3], [4, 5, 6])
    ~is [5, 7, 9]
  check:
    (fun
     | (x): x
     | (x, y, z): x+y+z)
      .map([1, 2, 3], [4, 5, 6])
    ~throws values(
      "Function.map: argument mismatch",
      "the given function's expected number of arguments does not match the given number of lists",
      "expected: 1 or 3",
      "given: 2",
    )
  check:
    (fun
     | (x): x
     | (x, y, z): x+y+z
     | (x, y, z, w, q, _, ...): x*y*z*w*q)
      .map([1, 2, 3], [4, 5, 6])
    ~throws values(
      "Function.map: argument mismatch",
      "the given function's expected number of arguments does not match the given number of lists",
      "expected: 1, 3, or at least 5",
      "given: 2",
    )
  check:
    (fun (~kw, x, y): x+y).map([1, 2, 3], [4, 5, 6])
    ~throws values(
      "Function.map: argument mismatch",
      "the given function expects keyword arguments",
      "required keywords: ~kw",
    )
  check:
    (fun (~kw1, ~kw2, x, y): x+y).map([1, 2, 3], [4, 5, 6])
    ~throws values(
      "Function.map: argument mismatch",
      "the given function expects keyword arguments",
      "required keywords: ~kw1 and ~kw2",
    )
  check:
    (fun (~kw1, ~kw2, ~kw3, x, y): x+y).map([1, 2, 3], [4, 5, 6])
    ~throws values(
      "Function.map: argument mismatch",
      "the given function expects keyword arguments",
      "required keywords: ~kw1, ~kw2, and ~kw3",
    )

// static info for built-in and defined methods
block:
  use_static
  check:
    List.sort.map([[1, 2, 3], [3, 1, 2], [2, 3, 1]]) ~is [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
    print.for_each([1, "2", #"3"]) ~prints "123"
  class A(val):
    method sort():
      List.sort(val)
    method print():
      import rhombus
      rhombus.print(val)
  check:
    A.sort.map([A([1, 2, 3]), A([3, 1, 2]), A([2, 3, 1])]) ~is [[1, 2, 3], [1, 2, 3], [1, 2, 3]]
    A.print.for_each([A(1), A("2"), A(#"3")]) ~prints "123"

// keyword splicing
block:
  fun take_all(~& _): #void
  check:
    take_all(~kw: #false,
             ~& {#'~kw: #false})
    ~throws "duplicate keyword in spliced map and direct keyword arguments"
  check:
    take_all(~& {#'~kw: #false},
             ~& {#'~kw: #false})
    ~throws "duplicate keyword in keyword-argument maps"
  check:
    take_all(~& {#'~kw: 1, #'~kw2: 2},
             ~& {#'~kw: 1, #'~kw3: 3, #'~kw4: 4})
    ~throws "duplicate keyword in keyword-argument maps"
  check:
    take_all(~& {#'~kw: 1, #'~kw3: 3, #'~kw4: 4},
             ~& {#'~kw: 1, #'~kw2: 2})
    ~throws "duplicate keyword in keyword-argument maps"
  check:
    take_all(~& MutableMap{#'~kw: 1, #'~kw2: 2})
    ~throws "not an immutable map for keyword arguments"
  check:
    take_all(~& MutableMap{#'~kw: 1, #'~kw2: 2},
             ~& MutableMap{#'~kw3: 3})
    ~throws "not an immutable map for keyword arguments"

block:
  use_static
  check:
    Function.pass.map([1, 2, 3], [4, 5, 6]) ~is [#void, #void, #void]
    Function.pass.for_each([1, 2, 3], [4, 5, 6]) ~is #void

check:
  def [[x, ...], [y, ...]] = [[1, 2, 3], [4, 5, 6]]
  [Function.pass(x, y), ...]
  ~is [#void, #void, #void]

// optimization in `Function.pass`
block:
  use_static
  def [[x, ...], ...] = [[1, 2, 3], [4, 5]]
  check:
    // no keyword or rest, optimized
    Function.pass(
      println(x), ..., ...,
      println("really " +& x), ..., ...,
    )
    ~prints "1\n2\n3\n4\n5\nreally 1\nreally 2\nreally 3\nreally 4\nreally 5\n"
  check:
    Function.pass(
      & [],
      println(x), ..., ...,
      println("really " +& x), ..., ...,
    )
    ~prints "1\n2\n3\n4\n5\nreally 1\nreally 2\nreally 3\nreally 4\nreally 5\n"
  check:
    Function.pass(
      ~& {},
      println(x), ..., ...,
      println("really " +& x), ..., ...,
    )
    ~prints "1\n2\n3\n4\n5\nreally 1\nreally 2\nreally 3\nreally 4\nreally 5\n"
  check:
    Function.pass(
      ~any_kw: #false,
      println(x), ..., ...,
      println("really " +& x), ..., ...,
    )
    ~prints "1\n2\n3\n4\n5\nreally 1\nreally 2\nreally 3\nreally 4\nreally 5\n"
  check:
    let punned_kw = #false
    Function.pass(
      ~punned_kw,
      println(x), ..., ...,
      println("really " +& x), ..., ...,
    )
    ~prints "1\n2\n3\n4\n5\nreally 1\nreally 2\nreally 3\nreally 4\nreally 5\n"
  check:
    fun do(pass):
      pass(
        println(x), ..., ...,
        println("really " +& x), ..., ...,
      )
    do(Function.pass)
    ~prints "1\n2\n3\n4\n5\nreally 1\nreally 2\nreally 3\nreally 4\nreally 5\n"

// correctness: ensure single-valued
block:
  use_static
  fun oops(_):
    values(1, 2)
  check:
    // no keyword or rest, optimized
    Function.pass(oops(1))
    ~throws values(
      "result arity mismatch",
      "expected number of values not received",
      "expected: 1",
      "received: 2",
    )
  check:
    Function.pass(& [], oops(1))
    ~throws values(
      "result arity mismatch",
      "expected number of values not received",
      "expected: 1",
      "received: 2",
    )
  check:
    Function.pass(~& {}, oops(1))
    ~throws values(
      "result arity mismatch",
      "expected number of values not received",
      "expected: 1",
      "received: 2",
    )
  check:
    Function.pass(~any_kw: #false, oops(1))
    ~throws values(
      "result arity mismatch",
      "expected number of values not received",
      "expected: 1",
      "received: 2",
    )
  check:
    let punned_kw = #false
    Function.pass(~punned_kw, oops(1))
    ~throws values(
      "result arity mismatch",
      "expected number of values not received",
      "expected: 1",
      "received: 2",
    )
  check:
    fun do(pass):
      pass(oops(1))
    do(Function.pass)
    ~throws values(
      "result arity mismatch",
      "expected number of values not received",
      "expected: 1",
      "received: 2",
    )

block:
  use_static
  def [[x, ...], ...] = [[1, 2, 3], [4, 5]]
  fun oops(_):
    values(1, 2)
  check:
    // no keyword or rest, optimized
    Function.pass(oops(x), ..., ...)
    ~throws values(
      "result arity mismatch",
      "expected number of values not received",
      "expected: 1",
      "received: 2",
    )
  check:
    Function.pass(& [], oops(x), ..., ...)
    ~throws values(
      "result arity mismatch",
      "expected number of values not received",
      "expected: 1",
      "received: 2",
    )
  check:
    Function.pass(~& {}, oops(x), ..., ...)
    ~throws values(
      "result arity mismatch",
      "expected number of values not received",
      "expected: 1",
      "received: 2",
    )
  check:
    Function.pass(~any_kw: #false, oops(x), ..., ...)
    ~throws values(
      "result arity mismatch",
      "expected number of values not received",
      "expected: 1",
      "received: 2",
    )
  check:
    let punned_kw = #false
    Function.pass(~punned_kw, oops(x), ..., ...)
    ~throws values(
      "result arity mismatch",
      "expected number of values not received",
      "expected: 1",
      "received: 2",
    )
  check:
    fun do(pass):
      pass(oops(x), ..., ...)
    do(Function.pass)
    ~throws values(
      "result arity mismatch",
      "expected number of values not received",
      "expected: 1",
      "received: 2",
    )


// name and who

block:
  fun f(who :: Int):
    ~name eff
    ~who who // shadows argument
    who
  check f(0) ~is #'eff
  check f("no") ~throws "eff:"


block:
  fun f(a :: Int):
    ~name: eff
    ~who: who
    who
  check f(0) ~is #'eff
  check f("no") ~throws "eff:"

block:
  fun f:
    ~name: eff
    ~who: who
  | f(a :: Any.of(who)):
      who
  check f(#'eff) ~is #'eff
  check f("no") ~throws "eff:"

block:
  fun f:
    ~name: eff
    ~who: who
  | f(a :: Int):
      who
  | f(a :: Int, b):
      [b, who]
  | f(a, b, who):
      who // not shadowed by `~who`
  | f(a, b, c, who):
      ~who: who
      who // shadowed by inner `~who`
  check f(0) ~is #'eff
  check f(0, 7) ~is [7, #'eff]
  check f(0, 1, 2) ~is 2
  check f(0, 1, 2, 3) ~is #'eff
  check f("no") ~throws "eff:"
  check f("no", 7) ~throws "eff:"

block:
  def f:
    fun (who :: Int):
      ~name eff
      ~who who
      who
  check f(0) ~is #'eff
  check f("no") ~throws "eff:"

block:
  def f:
    fun:
      ~name: eff
      ~who: who
    | (a :: Int):
        who
    | (a :: Int, b):
        [b, who]
    | (a, b, who):
        who // not shadowed by `~who`
    | (a, b, c, who):
        ~who: who
        who // shadowed by inner `~who`
  check f(0) ~is #'eff
  check f(0, 7) ~is [7, #'eff]
  check f(0, 1, 2) ~is 2
  check f(0, 1, 2, 3) ~is #'eff
  check f("no") ~throws "eff:"
  check f("no", 7) ~throws "eff:"

block:
  use_static
  fun f(other):
    ~who: who
    who < other
  check f(#'e) ~is #false
  check f(#'g) ~is #true

block:
  fun f1(x): x
  fun f2(x, y = 1, ~z: z, ~w = #false): x
  fun f3(x, y, z, & args): x
  fun f4(x, ~y, & args, ~& kws): x
  check f1.name() ~is #'f1
  check f1.realm() ~is #'rhombus
  check f2.name() ~is #'f2
  check f2.realm() ~is #'rhombus
  check print(f1.rename(#'helper)) ~prints "#<function:helper>"
  check f1.rename(#'any, ~realm: #'new).realm() ~is #'new
  check f1.arity() ~is values(2, [], [])
  check f2.arity() ~is values(6, [#'~z], [#'~w, #'~z])
  check f3.arity() ~is values(-8, [], [])
  check f4.arity() ~is values(-2, [#'~y], #false)
  check f2.reduce_arity(4, [#'~z], [#'~w, #'~z]) ~is_a Function
  check f4.reduce_arity(32, [#'~y], [#'~a, #'~b, #'~c, #'~y]) ~is_a Function

block:
  check (fun (x): x).name() ~is #'fun
  check (fun (x): x).realm() ~is #'rhombus
  check (fun (x):
           ~name: f
           x)
    .name() ~is #'f
  check (fun (x):
           ~name: f
           x)
    .realm() ~is #'rhombus
