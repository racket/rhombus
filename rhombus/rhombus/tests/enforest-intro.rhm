#lang rhombus/static/and_meta

// same as "transform-intro.rhm", but with `enforest`

space.enforest ident:
  space_path demo/ident
  macro_definer macro
  meta_namespace ident_meta:
    parse_syntax_class Parsed

// threads an `amt` value through expansion:
space.enforest scaled:
  space_path demo/scaled
  macro_definer macro:
    ~amt
  meta_namespace scaled_meta:
    parse_syntax_class Parsed(amt)
    description "scaled form"

meta:
  def mutable saved :~ List = []

expr.macro 'reset':
  saved := []
  '#void'

ident.macro 'same $(x :: Term)':
  saved := [[x, syntax_meta.flip_introduce(x)], & saved]
  x

expr.macro 'go $(x :: ident_meta.Parsed) $()':
  import lib("racket/base.rkt")
  def res:
    match x.group
    | '$_ $(x :: Term)':
        for all:
          each [plain_x, flipped_x]: saved
          syntax_meta.equal_name_and_scopes(flipped_x, syntax_meta.flip_introduce(x))
  '$(res)'

expr.macro 'intro':
  'go same ey'

check:
  go same ex
  ~is #true
reset
check:
  go same ex
  ~is #true
reset
check:
  intro
  ~is #true

scaled.macro 'as_scaled ($(x :: expr_meta.Parsed))':
  ~amt: a
  '$a * $x'

scaled.macro '$rhs and_as_scaled $(x :: expr_meta.Parsed) $()':
  ~amt: a
  '[$rhs, $a * $x]'

expr.macro 'with_scale $n: $(body :: Group)':
  match body
  | '$(s :: scaled_meta.Parsed(n.unwrap()))':
      s
check:
  with_scale 2:
    as_scaled (3 + 4)
  ~is 14

check:
  with_scale 2:
    as_scaled (7 - 8) and_as_scaled 3 + 4
  ~is [-2, 14]

check:
  ~eval
  module m ~lang rhombus/and_meta:
    space.enforest example:
      space_path my/example
      meta_namespace ns:«»
      export:
        nonesuch
  ~throws "nonesuch: exported identifier not defined"

check:
  ~eval
  module m ~lang rhombus/and_meta:
    space.enforest example:
      space_path my/example
      meta_namespace ns:
        export:
          nonesuch
  ~throws "onesuch: exported identifier not defined"

// make sure `private` works for every clause form
space.enforest ident2:
  space_path demo/ident
  private macro_definer macro
  private bridge_definer bridge
  meta_namespace ident2_meta:
    private parse_syntax_class Parsed
    private parse_prefix_more_syntax_class PrefixParsed
    private parse_infix_more_syntax_class InfixParsed
    private name_start_syntax_class Starts
    private parsed_packer pack
    private parsed_unpacker unpack
    private reflection space

// make sure `myspace_meta.Parsed` is bound in the `stxclass` space,
// so that `alias` works right:
space.enforest myspace:
  space_path myspace
  meta_namespace myspace_meta:
    parse_syntax_class Parsed
meta:
  import rhombus open
  namespace foo:
    export alias 'Parsed':
      'myspace_meta.Parsed'
  fun bar('$(_ :: foo.Parsed)'):
    #void

// check that edefinitions at the end of `meta_namespace` can
// see the syntax class
space.enforest myspace2:
  space_path myspace
  meta_namespace myspace2_meta:
    parse_syntax_class Parsed
    fun parse_1(stx):
      let '$(parsed :: Parsed)' = stx
      parsed
    fun parse_2('$(parsed :: Parsed)'):
      parsed
