#lang rhombus

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm") as ex_a
  [ex_a.alpha, ex_a.beta]
  ~is ["alpha", "beta"]

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm") as ex_a:
            expose: beta
  [ex_a.alpha, beta, ex_a.beta]
  ~is ["alpha", "beta", "beta"]

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm") as ex_a:
            expose: beta
  alpha
  ~throws "alpha: undefined"

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").ExList
  [ExList(1, 2), ExList.length([1, 2, 3]),
   for ExList:
     each i in 10..12
     i]
  ~is [[1, 2], 3, [10, 11]]

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").ExList open
  length([1, 2, 3])
  ~is 3

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").ExList open
  for ExList: "oops, no ExList"
  ~throws "expected reducer"

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm") open
  [alpha, beta]
  ~is ["alpha", "beta"]

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm") open
  ex_a.alpha
  ~throws "ex_a: undefined"

check:
  ~eval
  import:
    lib("rhombus/tests/example-a.rhm") as ex_a
    .ex_a expose: beta
  [ex_a.alpha, beta]
  ~is ["alpha", "beta"]

check:
  ~eval
  import: lib("rhombus/tests/example-b.rhm") as ex_b
  ex_b.ex_a.alpha
  ~is "alpha"

check:
  ~eval
  import: lib("rhombus/tests/example-b.rhm") open
  ex_a.alpha
  ~is "alpha"

check:
  ~eval
  import: lib("rhombus/tests/example-b.rhm").ex_a
  ex_a.alpha
  ~is "alpha"

check:
  ~eval
  import: .List:
            rename: cons as kons
  List.kons(1, [2])
  ~is List.cons(1, [2])

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm") open
  import: .ExList:
            rename: cons as kons
  [ExList.kons(1, [2]),
   List.cons(1, [2])]
  ~is [List.cons(1, [2]), List.cons(1, [2])]

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm") open
  block:
    import: .ExList:
              rename: cons as kons
    [ExList.kons(1, [2]),
     List.cons(1, [2])]
  ~is [List.cons(1, [2]), List.cons(1, [2])]

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").alpha
  alpha
  ~is "alpha"

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").alpha as a
  a
  ~is "alpha"

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").alpha open
  alpha
  ~throws"cannot open binding"

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").alpha:
           except: other
  "does not get here"
  ~throws "identifier to exclude is not nested within the imported name"

check:
  ~eval
  import: lib("rhombus/tests/example-a.rhm").alpha
  beta
  ~throws "beta: undefined"

check:
  import:
    rhombus/meta.expr
    rhombus.Pair as p:
      only_space expr
      rename:
        cons as make_pair
      only:
        make_pair
  p.make_pair
  ~is Pair.cons

check:
  import:
    rhombus/meta.expr
    rhombus.Pair as p:
      only_space expr
      only:
        cons as make_pair
  p.make_pair
  ~is Pair.cons

check:
  fun f(x, y):
    1 + block:
      import rhombus.(*) as +
      x + y - 1
  f(3, 4)
  ~is 12

check:
  import:
    lib("rhombus/tests/example-f.rhm") as ex_f
  [ex_f.prefix.original, ex_f.prefix.added]
  ~is ["orig", "add"]

check:
  import:
    lib("rhombus/tests/example-f.rhm").prefix
  [prefix.original, prefix.added]
  ~is ["orig", "add"]

check:
  import:
    lib("rhombus/tests/example-f.rhm"):
      expose prefix
      rename prefix as pfx
  [pfx.original, pfx.added]
  ~is ["orig", "add"]

check:
  import:
    lib("rhombus/tests/example-f.rhm"):
      expose prefix as pfx
  [pfx.original, pfx.added]
  ~is ["orig", "add"]

check:
  import:
    lib("rhombus/tests/example-f.rhm").prefix as pfx
  [pfx.original, pfx.added]
  ~is ["orig", "add"]

check:
  import:
    lib("rhombus/tests/example-f.rhm"):
      only prefix
      open
  [prefix.original, prefix.added]
  ~is ["orig", "add"]

check:
  import:
    lib("rhombus/tests/example-f.rhm") as ex:
      only prefix
  [ex.prefix.original, ex.prefix.added]
  ~is ["orig", "add"]

check:
  import:
    rhombus/meta open
    rhombus.String as S:
      only_space annot
  "apple" :: S
  ~completes

check:
  ~eval
  import:
    rhombus/meta open
    rhombus.String as S:
      only_space annot
  def '$(s :: S)' = '"5"'
  ~throws "not bound as a syntax class"

check:
  ~eval
  import:
    rhombus/meta open
    rhombus.String as S:
      only_space annot
  S.substring
  ~throws "S: undefined"

// check that an explicit `.` name works in `import` forms
check:
  import:
    "example-g.rkt" open
  [#{a.x}, #{a.y}]
  ~is ["x", "y"]
check:
  import:
    "example-g.rkt":
      expose #{a.x}
  #{a.x}
  ~is "x"
check:
  import:
    "example-g.rkt".#{a.x}
  #{a.x}
  ~is "x"
check:
  import:
    "example-g.rkt":
      expose #{a.x} as _x_
  _x_
  ~is "x"
check:
  import:
    "example-g.rkt" open:
      except #{a.x}
  #{a.y}
  ~is "y"
check:
  import:
    "example-g.rkt" open:
      expose #{a.x}
      rename #{a.x} as _x_
  _x_
  ~is "x"
