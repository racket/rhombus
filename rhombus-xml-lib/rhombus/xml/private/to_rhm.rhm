#lang rhombus/static/and_meta
import:
  lib("xml/main.rkt") as rkt
  "class.rhm" open

export:
  to_rhm

fun to_rhm(doc,
           ~keep_pi: keep_pi,
           ~normalize: normalize):
  let PairList[misc, ...] = rkt.#{document-misc}(doc)
  Document(~prolog: prolog_to_rhm(rkt.#{document-prolog}(doc), keep_pi),
           ~element: element_to_rhm(rkt.#{document-element}(doc), normalize, keep_pi),
           ~misc: filter_pi([misc_to_rhm(misc), ...], keep_pi))

fun prolog_to_rhm(prolog, keep_pi):
  let PairList[pre_misc, ...] = rkt.#{prolog-misc}(prolog)
  let dtd = rkt.#{prolog-dtd}(prolog)
  let PairList[post_misc, ...] = rkt.#{prolog-misc2}(prolog)
  Prolog(~pre_misc: filter_pi([misc_to_rhm(pre_misc), ...], keep_pi),
         ~dtd: dtd && DTD(~name: rkt.#{document-type-name}(dtd),
                          ~system: to_string(rkt.#{external-dtd-system}(dtd)),
                          ~public:
                            let pub = rkt.#{external-dtd/public?}(dtd) && rkt.#{external-dtd/public-public}(dtd)
                            pub && to_string(pub)),
         ~post_misc: filter_pi([misc_to_rhm(post_misc), ...], keep_pi))

fun element_to_rhm(e, normalize, keep_pi):
  let PairList[attr, ...] = rkt.#{element-attributes}(e) 
  let PairList[content, ...] = rkt.#{element-content}(e) 
  Element(~srcloc: source_to_rhm(e),
          ~name: to_string(rkt.#{element-name}(e)),
          ~attributes: [attribute_to_rhm(attr), ...],
          ~content: normalize_text(filter_pi([content_to_rhm(content, normalize, keep_pi), ...], keep_pi),
                                   normalize))

fun content_to_rhm(c, normalize, keep_pi):
  cond
  | rkt.#{element?}(c):
      element_to_rhm(c, normalize, keep_pi)
  | rkt.#{entity?}(c):
      entity_to_rhm(c, normalize)
  | rkt.#{pcdata?}(c):
      pcdata_to_rhm(c)
  | rkt.#{cdata?}(c):
      cdata_to_rhm(c)
  | rkt.#{comment?}(c):
      comment_to_rhm(c)
  | rkt.#{p-i?}(c):
      p_i_to_rhm(c)
  | ~else:
      // permissive mode
      c

fun misc_to_rhm(misc):
  cond
  | rkt.#{comment?}(misc):
      comment_to_rhm(misc)
  | rkt.#{p-i?}(misc):
      p_i_to_rhm(misc)

fun pcdata_to_rhm(pc):
  Text(~srcloc: source_to_rhm(pc),
       ~text: to_string(rkt.#{pcdata-string}(pc)))

fun cdata_to_rhm(c):
  let srcloc = source_to_rhm(c)
  let s = to_string(rkt.#{cdata-string}(c))
  if (s.length() >= 12
        && s.substring(0, 9) == "<![CDATA["
        && s.substring(s.length() - 3, s.length()) == "]]>")
  | let sub = s.substring(9, s.length() - 3)
    if sub.contains("]]>")
    | Inject(~srcloc: srcloc,
             ~text: s)
    | Text(~srcloc: srcloc,
           ~text: sub,
           ~write_mode: Text.WriteMode.cdata)
  | Inject(~srcloc: srcloc,
           ~text: s)

fun comment_to_rhm(c):
  Comment(~text: to_string(rkt.#{comment-text}(c)))

fun p_i_to_rhm(pi):
  ProcessingInstruction(~target_name: to_string(rkt.#{p-i-target-name}(pi)),
                        ~instruction: to_string(rkt.#{p-i-instruction}(pi)))

fun source_to_rhm(s):
  let start = rkt.#{source-start}(s)
  let stop = rkt.#{source-stop}(s)
  if start is_a Symbol || stop is_a Symbol
  | #false
  | SrclocRange(Srcloc(#false,
                       rkt.#{location-line}(start),
                       rkt.#{location-char}(start),
                       rkt.#{location-offset}(start),
                       rkt.#{location-offset}(stop) - rkt.#{location-offset}(start)),
                Srcloc(#false,
                       rkt.#{location-line}(stop),
                       rkt.#{location-char}(stop),
                       rkt.#{location-offset}(stop),
                       #false))

fun attribute_to_rhm(attr):
  Attribute(~srcloc: source_to_rhm(attr),
            ~name: to_string(rkt.#{attribute-name}(attr)),
            ~value:
              let v = rkt.#{attribute-value}(attr)
              if v is_a ReadableString
              | to_string(v)
              | v)
  
fun entity_to_rhm(e, normalize):
  let v = rkt.#{entity-text}(e)
  let srcloc = source_to_rhm(e)
  if v is_a Int
  | if normalize
    | Text(~srcloc: srcloc,
           ~text: to_string(Char.from_int(v)),
           ~write_mode: Text.WriteMode.entity)
    | Entity(~srcloc: srcloc,
             ~text: v)
  | Entity(~srcloc: srcloc,
           ~text: to_string(v))

fun filter_pi(misc :: List, keep_pi):
  if keep_pi
  | misc
  | misc.filter(~skip: fun (x): x is_a ProcessingInstruction)

fun normalize_text(content :: List, normalize):
  if !normalize
  | content
  | fun merge_tail(new_content :~ List, tail_text :~ List.of(Text)) :~ List:
      if tail_text.length() <= 1
      | new_content
      | let [t, ...] = tail_text
        let new_t = Text(~srcloc: for fold(new_srcloc = #false) (srcloc in [t.srcloc, ...]):
                                    merge_srclocs(new_srcloc, srcloc),
                         ~text: String.append(t.text, ...))
        new_content.drop_last(1).add(new_t)
    let (new_content, tail_strs):
      for fold (new_content :~ List = [], tail_strs :~ List = []) (c in content):        
        if new_content == [] || tail_strs == []:
        | values(new_content.add(c),
                 match c
                 | t :: Text: [t]
                 | ~else: [])
        | match c
          | t :: Text:
              values(new_content, tail_strs.add(t))
          | ~else:
              values(merge_tail(new_content, tail_strs).add(c),
                     [])
    merge_tail(new_content, tail_strs)


fun merge_srclocs(new_srcloc, srcloc):
  match [new_srcloc, srcloc]
  | [#false, srcloc]: srcloc
  | [new_srcloc, #false]: new_srcloc
  | [SrclocRange(Srcloc(src, line, col, offset, _),
                 Srcloc(_, end_line, end_col, end_offset, _)),
     SrclocRange(Srcloc(_, line2, col2, offset2, _),
                 Srcloc(_, end_line2 :~ Int, end_col2, end_offset2, _))]:
      let new_line = math.min(line, line2)
      let new_col = math.min(col, col2)
      let new_offset = math.min(offset, offset2)
      let new_end_line = math.max(end_line, end_line2)
      let new_end_col:
        cond
        | end_line2 > end_line: end_col2
        | end_line > end_line2: end_col
        | ~else: math.max(end_col, end_col2)
      let new_end_offset = math.max(end_offset, end_offset2)
      SrclocRange(Srcloc(src, new_line, new_col, new_offset, new_end_offset - new_offset),
                  Srcloc(src, new_end_line, new_end_col, new_end_offset, #false))
    