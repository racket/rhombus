#lang rhombus/static/and_meta
import:
  lib("racket/base.rkt") as rkt
  lib("rhombus/private/amalgam.rkt")!evt

export:
  thread
  Thread
  Semaphore
  Channel
  except_space class:
    evt.ProgressEvt
    evt.CommitEvt
  Evt
  only_space annot:
    evt.Evt

expr.macro 'thread: $(body :: Block)':
  'Thread(fun () $body)'

namespace ~open:
  export: Thread
  class Thread(private hand):
    opaque
    internal _Thread
    implements evt.Evt
    private implements evt._Evt
    constructor (thunk :: Function.of_arity(0)):
      super(rkt.thread(thunk))
    override property handle: hand
    private override property sync_handle: rkt.#{wrap-evt}(hand, fun (v): this)
    method wait():
      rkt.#{thread-wait}(hand)
    method break(kind :: Thread.Break = #'interrupt):
      rkt.#{break-thread}(hand, match kind
                                | #'interrupt: #false
                                | #'hang_up: #'#{hang-up}
                                | #'terminate: #'terminate)
    method kill():
      rkt.#{kill-thread}(hand)

    export:
      from_handle
      sleep
      Break

    fun sleep(n :: NonnegReal):
      rkt.sleep(n)

  fun from_handle(hand) :: Thread:
    ~who: who
    unless rkt.#{thread?}(hand)
    | error(~who: who, "not a thread handle",
            error.val(hand))
    _Thread(hand)

  enum Break:
    interrupt
    hang_up
    terminate

namespace ~open:
  export: Semaphore
  class Semaphore(private hand):
    opaque
    internal _Semaphore
    implements evt.Evt
    private implements evt._Evt
    constructor (init :: NonnegInt = 0):
      super(rkt.#{make-semaphore}(init))
    override property handle: hand
    private override property sync_handle: rkt.#{wrap-evt}(hand, fun (v): this)
    method post():
      rkt.#{semaphore-post}(hand)
    method wait():
      rkt.#{semaphore-wait}(hand)
    method poll():
      rkt.#{semaphore-try-wait?}(hand)

    export:
      from_handle

  fun from_handle(hand) :: Semaphore:
    ~who: who
    unless rkt.#{semaphore?}(hand)
    | error(~who: who, "not a semaphore handle")
    _Semaphore(hand)

namespace ~open:
  export:
    Channel

  class Channel(private hand):
    export:
      only_space annot:
        PutEvt
    opaque
    internal _Channel
    implements evt.Evt
    constructor ():
      super(rkt.#{make-channel}())
    override property handle: hand
    method get():
      rkt.#{channel-get}(hand)
    method put(value):
      rkt.#{channel-put}(hand, value)
    method put_evt(value) :~ evt.Evt:
      PutEvt(rkt.#{channel-put-evt}(hand, value))

    class PutEvt(hand):
      implements evt.Evt
      private implements evt._Evt
      opaque
      override property handle: hand
      private override property sync_handle: rkt.#{wrap-evt}(hand, fun (e): this)

class AlwaysEvt():
  implements evt.Evt
  private implements evt._Evt
  opaque
  override property handle: rkt.#{always-evt}
  private override property sync_handle: rkt.#{wrap-evt}(rkt.#{always-evt}, fun (b): this)

class NeverEvt():
  implements evt.Evt
  private implements evt._Evt
  opaque
  override property handle: rkt.#{never-evt}
  private override property sync_handle: rkt.#{wrap-evt}(rkt.#{never-evt}, fun (b): this)

namespace Evt:
  export:
    rename:
      evt.Evt.sync as sync
    always
    never

  def always = AlwaysEvt()
  def never = NeverEvt()
