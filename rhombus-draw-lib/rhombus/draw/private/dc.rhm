#lang rhombus/static/and_meta
import:
  "rkt.rhm"
  "type.rhm" open
  "dc-interface.rhm".DC as DCer
  "dc-interface.rhm"._DC as _DCer
  "dc-interface.rhm".DCForward
  "color.rhm".Color
  "pen.rhm".Pen
  "pen.rhm"!private._Pen
  "brush.rhm".Brush
  "brush.rhm"!private._Brush
  "font.rhm".Font
  "font.rhm"!private._Font
  "region.rhm".Region
  "region.rhm"!private:
    expose:
      _Region
      set_wrap_dc
  "path.rhm".Path
  "symbol_map.rhm":
    expose:
      symbol_map_annot
      symbol_set_annot
  "bitmap-interface.rhm".Bitmap
  "transformation.rhm" open
  "transformation.rhm"!private open
  "text-combine.rhm".DC.TextCombine

export:
  DC

module internal:
  export:
    SomeDC
    DCer

interface DC:
  export:
    from_handle

  extends DCer

  dot '$left . save_and_restore':
    ~head_stx: head
    ~tail: '$tail'
    match tail
    | ': $(body :: Block)':
        values('block:
                  def dc :: DC = $left
                  try:
                    ~initially dc.save()
                    block $body
                    ~finally dc.restore()',
               '')
    | _:
        syntax_meta.error("expected a block afterward", head)

  property size :: Size:
    let (w, h) = rkt.send handle.#{get-size}()
    Size(w, h)

  property width: size.width
  property height: size.height

  method save()
  method restore()

  method clear():
    rkt.send handle.clear()

  method font_metrics_key():
    rkt.send handle.#{cache-font-metrics-key}()

  property
  | pen :: Pen:
      _Pen(rkt.send handle.#{get-pen}())
  | pen := p :: Pen:
      rkt.send handle.#{set-pen}(p.handle)

  property
  | brush :: Brush:
      _Brush(rkt.send handle.#{get-brush}())
  | brush := b :: Brush:
      rkt.send handle.#{set-brush}(b.handle)

  property
  | font :: Font:
      _Font(rkt.send handle.#{get-font}())
  | font := f :: Font:
      rkt.send handle.#{set-font}(f.handle)

  property
  | clipping_region :: maybe(Region):
      let r = rkt.send handle.#{get-clipping-region}()
      r && _Region(r)()
  | clipping_region := region :: maybe(Region):
      rkt.send handle.#{set-clipping-region}(region && (region :~ _Region).handle)

  property
  | smoothing :: Smoothing:
      rkt.send handle.#{get-smoothing}()
  | smoothing := v :: Smoothing:
      rkt.send handle.#{set-smoothing}(v)

  method copy(src :: RectLike,
              dest :: PointLike):
    rkt.send handle.copy(src.x, src.y, src.width, src.height, dest.x, dest.y)

  method point(pt :: PointLike):
    rkt.send handle.#{draw-point}(pt.x, pt.y)

  method line(pt1 :: PointLike,
              pt2 :: PointLike):
    rkt.send handle.#{draw-line}(pt1.x, pt1.y, pt2.x, pt2.y)

  method lines([pt :: PointLike, ...],
               ~dpt: dpt :: PointLike = Point.zero,
               ~dx: dx :: Real = 0.0,
               ~dy: dy :: Real = 0.0):
    rkt.send handle.#{draw-lines}(PairList[Pair(pt.x, pt.y), ...], dpt.x + dx, dpt.y + dy)

  method polygon([pt :: PointLike, ...],
                 ~dpt: dpt :: PointLike = Point.zero,
                 ~dx: dx :: Real = 0.0,
                 ~dy: dy :: Real = 0.0,
                 ~fill: fill :: Region.Fill = #'odd_even):
    rkt.send handle.#{draw-polygon}(PairList[Pair(pt.x, pt.y), ...], dpt.x + dx, dpt.y + dy,
                                    fill_convert(fill))

  method path(p :: Path,
              ~dpt: dpt :: PointLike = Point.zero,
              ~dx: dx :: Real = 0.0,
              ~dy: dy :: Real = 0.0,
              ~fill: fill :: Region.Fill = #'odd_even):
    rkt.send handle.#{draw-path}(p.handle, dpt.x + dx, dpt.y + dy, fill_convert(fill))

  method rectangle(r :: RectLike):
    rkt.send handle.#{draw-rectangle}(r.x, r.y, r.width, r.height)

  method rounded_rectangle(r :: RectLike,
                           radius :: Real = -0.25):
    rkt.send handle.#{draw-rounded-rectangle}(r.x, r.y, r.width, r.height, radius)

  method ellipse(r :: RectLike):
    rkt.send handle.#{draw-ellipse}(r.x, r.y, r.width, r.height)

  method arc(r :: RectLike,
             start :: Real, end :: Real):
    rkt.send handle.#{draw-arc}(r.x, r.y, r.width, r.height, start, end)

  method spline(pt1 :: PointLike,
                pt2 :: PointLike,
                pt3 :: PointLike):
    rkt.send handle.#{draw-spline}(pt1.x, pt1.y, pt2.x, pt2.y, pt3.x, pt3.y)

  method bitmap(b :: Bitmap,
                ~dpt: dpt :: PointLike = Point.zero,
                ~dx: dx :: Real = 0,
                ~dy: dy :: Real = 0,
                ~source: source :: RectLike = Rect(Point.zero, b.size),
                ~style: style :: DC.BitmapOverlay = #'solid,
                ~color: color :: Color = Color("black"),
                ~mask: mask :: maybe(Bitmap) = #false):
    rkt.send handle.#{draw-bitmap-section}(b.handle, dpt.x + dx, dpt.y + dy,
                                           source.x, source.y,
                                           source.width, source.height,
                                           style, color.handle, mask)
    #void

  method text(str :: String,
              ~dpt: dpt :: Point = Point.zero,
              ~dx: dx :: Real = 0,
              ~dy: dy :: Real = 0,
              ~combine: combine :: DC.TextCombine = #'kern,
              ~angle: angle :: Real = 0.0):
    rkt.send handle.#{draw-text}(str, dpt.x + dx, dpt.y + dy,
                                 match combine
                                 | #'kern: #true
                                 | #'grapheme: #'grapheme
                                 | ~else: #false,
                                 0,
                                 angle)

  method
  | scale(sx :: Real, sy :: Real):
      rkt.send handle.#{scale}(sx, sy)
  | scale(s :: Real):
      rkt.send handle.#{scale}(s, s)
  method
  | translate(dx :: Real, dy :: Real):
      rkt.send handle.#{translate}(dx, dy)
  | translate(dpt :: PointLike):
      rkt.send handle.#{translate}(dpt.x, dpt.y)

  method rotate(radians :: Real):
    rkt.send handle.#{rotate}(radians)
  method transform(a :: Transformation):
    rkt.send handle.#{transform}(a)

  property
  | transformation :: Transformation:
      let Array(Array(xx, yx, xy, yy, x0, y0), x, y, sx, sy, rot) =  rkt.send handle.#{get-transformation}()
      let t = Transformation(xx, yx, xy, yy, x0, y0)
      if x .= 0 && y .= 0 && sx .= 1 && sy .= 1 && rot >= 0
      | t
      | t.translate(x, y).scale(sx, sy).rotate(rot)
  | transformation := t :: Transformation:
      rkt.send handle.#{set-transformation}(Array(Array(t.xx, t.yx, t.yx, t.yy, t.x0, t.y0), 0, 0, 1, 1, 0))

  property
  | layered_transformation :: LayeredTransformation:
      _LayeredTransformation(rkt.send handle.#{get-transformation}())
  | layered_transformation := a :: LayeredTransformation:
      rkt.send handle.#{set-transformation}(_LayeredTransformation.hand(a))

  symbol_set_annot Smoothing:
    { unsmoothed, aligned, smoothed }

  symbol_set_annot BitmapOverlay:
    { solid, opaque, xor }

  symbol_map_annot Fill fill_convert:
    { odd_even: #{odd-even},
      winding: winding }

  export:
    BitmapOverlay
    TextCombine
    Fill
    Transformation
    LayeredTransformation
    Smoothing

fun from_handle(handle) :: DC:
  unless handle rkt.is_a rkt.#{dc<%>}
  | error(~who: "DC.from_handle",
          ~exn: Exn.Fail.Annot,
          "not a DC handle",
          error.val(handle))
  SomeDC(handle)

class DCDump(pen, brush, font, clipping_region, layered_transformation, dump)

class SomeDC(private _handle):
  nonfinal
  implements DC
  override property handle: _handle

  constructor (hand):
    super(hand)

  private field dump = #false

  override method save():
    dump := DCDump(pen, brush, font, clipping_region, layered_transformation, dump)

  override method restore():
    unless dump
    | error(~who: "DC.restore", "no state saved")
    macro 'update $('. $field') ...':
      'block:
         def old_dump :~ DCDump = dump
         $field := old_dump . $field
         ...'
    update
      .pen
      .brush
      .font
      .clipping_region
      .layered_transformation
      .dump

  private implements Printable
  private override describe(mode, recur):
    PrintDesc.list("DC(", [], ")")

set_wrap_dc(SomeDC)

annot.delayed_complete DCForward: DC
